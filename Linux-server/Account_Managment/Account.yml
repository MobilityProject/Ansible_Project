---
- name: Check pts settings in /etc/securetty
  hosts: all
  become: yes

  tasks:
    - name: Gather facts
      ansible.builtin.setup:

    - name: Check for pts settings in /etc/securetty on Debian-based systems
      when: ansible_facts['os_family'] == "Debian"
      command: grep -E '^pts/[0-9]+' /etc/securetty
      register: pts_settings_debian
      ignore_errors: yes

    - name: Check for pts settings in /etc/securetty on Red Hat-based systems
      when: ansible_facts['os_family'] == "RedHat"
      command: grep -E '^pts/[0-9]+' /etc/securetty
      register: pts_settings_redhat
      ignore_errors: yes

    - name: Report if pts settings do not exist on Debian-based systems
      debug:
        msg: "존재하지 않습니다: /etc/securetty 파일에서 pts 설정이 없습니다 (Debian 계열)"
      when: 
        - ansible_facts['os_family'] == "Debian"
        - pts_settings_debian.stdout == ""

    - name: Report if pts settings do not exist on Red Hat-based systems
      debug:
        msg: "존재하지 않습니다: /etc/securetty 파일에서 pts 설정이 없습니다 (Red Hat 계열)"
      when: 
        - ansible_facts['os_family'] == "RedHat"
        - pts_settings_redhat.stdout == ""

    - name: Report if pts settings exist on Debian-based systems
      debug:
        msg: "설정이 존재합니다: /etc/securetty 파일에 pts 설정이 있습니다 (Debian 계열)"
      when: 
        - ansible_facts['os_family'] == "Debian"
        - pts_settings_debian.stdout != ""

    - name: Report if pts settings exist on Red Hat-based systems
      debug:
        msg: "설정이 존재합니다: /etc/securetty 파일에 pts 설정이 있습니다 (Red Hat 계열)"
      when: 
        - ansible_facts['os_family'] == "RedHat"
        - pts_settings_redhat.stdout != ""

    - name: Check for PermitRootLogin setting
      command: grep -Ei '^\s*PermitRootLogin\s+yes' /etc/ssh/sshd_config
      register: permit_root_login_check
      ignore_errors: yes

    - name: Check for commented PermitRootLogin setting
      command: grep -Ei '^\s*#\s*PermitRootLogin' /etc/ssh/sshd_config
      register: commented_permit_root_login_check
      ignore_errors: yes

    - name: Fail if PermitRootLogin yes is not found or is commented
      fail:
        msg: "취약: /etc/ssh/sshd_config 파일에 PermitRootLogin yes가 설정되어 있지 않거나 주석 처리되어 있습니다."
      when:
        - permit_root_login_check.stdout == ""
        - commented_permit_root_login_check.stdout != ""

    - name: Add PermitRootLogin no under # Authentication if vulnerable
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        insertafter: '^#\s*Authentication'
        line: 'PermitRootLogin no'
        state: present
      when:
        - permit_root_login_check.stdout == ""
        - commented_permit_root_login_check.stdout != ""
      ignore_errors: yes  

    - name: Check if account line exists and is uncommented
      command: "grep -P '^\\s*account\\s+required\\s+pam_faillock\\.so\\s+preauth\\s+silent\\s+audit\\s+deny=5' /etc/pam.d/system-auth"
      register: pam_check
      ignore_errors: yes

    - name: Set status based on grep result
      fail:
        msg: "Vulnerability found: Required 'account required pam_faillock.so preauth silent audit deny=5' is missing or commented out."
      when: pam_check.rc != 0
      ignore_errors: yes

    - name: Add account line if it is missing
      blockinfile:
        path: "{{ item }}"
        insertafter: "^\\s*account"
        block: |
          account required pam_faillock.so preauth silent audit deny=5 unlock_time=600
      with_items:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when: pam_check.rc != 0
      ignore_errors: yes 
