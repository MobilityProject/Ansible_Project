---
- name: redis.conf 보안 설정 확인
  hosts: all
  become: yes
  vars: 
    allow_list:  # 추가하고자 하는 IP 주소 목록
      - "192.168.0.1"
      - "10.0.0.2"
      - "10.0.2.15"
    
    deny_list:
      - "192.168.0.100"
      - "10.0.0.50"


  tasks:
    # redis.conf에서 requirepass가 주석 처리되어 있는지 확인
    - name: redis.conf에서 requirepass가 주석 처리되어 있는지 확인
      command: grep -i '^\s*#\s*requirepass' /etc/redis/redis.conf
      register: requirepass_commented
      changed_when: false
      failed_when: false  # grep의 non-zero return code를 실패로 간주하지 않음

    # 주석 처리 여부에 따른 결과 메시지 출력
    - name: 주석 처리 여부 확인 및 메시지 출력
      debug:
        msg: >
          {% if requirepass_commented.rc == 0 %}
          'requirepass'가 /etc/redis/redis.conf에서 주석 처리되어 있습니다. 주석을 제거해야 합니다.
          {% else %}
          'requirepass'가 /etc/redis/redis.conf에서 주석 처리되어 있지 않습니다. 설정이 올바릅니다.
          {% endif %}

    # requirepass 앞에 주석(#) 삭제
    - name: requirepass 앞에 주석(#) 삭제
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^\s*#\s*(requirepass\s+.*)'
        line: '\1'  # 주석을 제거하고 나머지 내용을 유지
        backrefs: yes  # 정규 표현식의 캡처 그룹을 사용할 수 있도록 설정
      when: requirepass_commented.rc == 0  # 주석이 있는 경우



    # Binding 설정
    - name: bind 설정에 유효한 IP 주소가 있는지 확인
      shell: grep -E '^bind\s+[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' /etc/redis/redis.conf
      register: bind_ip_check
      ignore_errors: yes
      changed_when: false

    # deny_list에 IP가 존재할 경우 실패
    - name: deny_list 내 IP가 존재할 경우 실패
      fail:
        msg: "'bind' 설정에 deny_list 내 IP가 포함되어 있습니다. /etc/redis/redis.conf를 확인하세요."
      when: 
        - bind_ip_check.stdout is search(deny_list | join('|'))

    # 127.0.0.1만 존재할 경우 allow_list 추가
    - name: 127.0.0.1만 존재할 경우 allow_list 추가
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^bind\s+127\.0\.0\.1\s*$'
        line: "bind 127.0.0.1 {{ allow_list | join(' ') }}"
        insertafter: '^#.*bind'
      when: 
        - bind_ip_check.stdout is search('^bind\s+127\.0\.0\.1\s*$')

    # 127.0.0.1과 allow_list의 IP가 존재할 경우 성공 메시지 출력
    - name: 127.0.0.1과 allow_list 내 IP가 존재할 경우 성공
      debug:
        msg: "'bind' 설정이 올바르게 되어 있습니다."
      when: 
        - bind_ip_check.stdout is search('^bind\s+(127\.0\.0\.1|(' + allow_list | join('|') + '))')




    # Slave 읽기 전용 모드 설정
    - name: replica-read-only가 yes로 설정되어 있는지 확인
      command: grep -i '^\s*replica-read-only\s*yes' /etc/redis/redis.conf
      register: replica_read_only_check
      ignore_errors: yes
      changed_when: false

    - name: replica-read-only 상태 확인 및 설정
      debug:
        msg: >
          {% if replica_read_only_check.rc == 0 %}
          "'replica-read-only'가 /etc/redis/redis.conf에서 'yes'로 설정되어 있습니다."
          {% else %}
          "'replica-read-only'가 /etc/redis/redis.conf에서 'no'로 설정되어 있습니다. 이를 'yes'로 변경합니다."
          {% endif %}
      when: true  # 항상 실행

    - name: replica-read-only를 yes로 변경
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^\s*replica-read-only\s*no'
        line: 'replica-read-only yes'
      when: replica_read_only_check.rc != 0  # no인 경우


    # rename-command 설정
    - name: redis.conf에서 rename-command CONFIG가 주석 처리되어 있는지 확인
      shell: grep -i '^\s*#\s*rename-command CONFIG' /etc/redis/redis.conf
      register: rename_command_check
      ignore_errors: yes
      changed_when: false

    - name: rename-command CONFIG가 주석 처리된 경우 실패
      fail:
        msg: "'rename-command CONFIG'가 /etc/redis/redis.conf에서 주석 처리되어 있습니다. 이는 보안 취약점입니다."
      when: rename_command_check.rc == 0  # 주석 처리된 경우에만 실행
      ignore_errors: yes

    - name: rename-command CONFIG가 주석 처리되어 있지 않으면 성공 메시지 출력
      debug:
        msg: "'rename-command CONFIG'가 /etc/redis/redis.conf에서 주석 처리되어 있지 않습니다."
      when: rename_command_check.rc != 0  # 주석 해제된 경우에만 실행

    - name: rename-command CONFIG 주석 해제
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^\s*#\s*rename-command\s+CONFIG'
        line: 'rename-command CONFIG'
        state: present
      when: rename_command_check.rc == 0  # 주석 처리된 경우에만 실행


  # 데이터 디렉터리 접근 권한 설정 
    - name: /etc/redis 권한 확인
      command: stat -c "%a" /etc/redis
      register: redis_permissions

    - name: 권한이 2750인지 확인하고 결과 처리
      debug:
        msg: >
          {% if redis_permissions.stdout == '2750' %}
          /etc/redis의 권한이 2750입니다. 설정이 올바릅니다. (ok)
          {% else %}
          /etc/redis의 권한이 2750이 아닙니다. 검토가 필요합니다.
          {% endif %}

    - name: 권한이 2750이 아닐 경우 실패 처리
      fail:
        msg: "/etc/redis의 권한이 2750이 아닙니다. 검토가 필요합니다."
      when: redis_permissions.stdout != '2750'
      ignore_errors: yes

    - name: 권한을 2750으로 변경
      file:
        path: /etc/redis
        mode: '2750'
        state: directory
      when: redis_permissions.stdout != '2750'

  # 설정 파일 접근권한 설정
    - name: /etc/redis/redis.conf 권한 확인
      command: ls -al /etc/redis/redis.conf
      register: redis_conf_permissions

    - name: 권한 처리
      debug:
        msg: >
          {% if redis_conf_permissions.stdout.split()[0] == '-rw-------' %}
          /etc/redis/redis.conf의 권한이 600입니다. 설정이 올바릅니다. (success)
          {% else %}
          /etc/redis/redis.conf의 권한이 600을 초과합니다. 권한을 600으로 변경합니다.
          {% endif %}

    - name: 권한을 600으로 변경
      file:
        path: /etc/redis/redis.conf
        mode: '0600'
      when: redis_conf_permissions.stdout.split()[0] != '-rw-------'

